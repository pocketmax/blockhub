# image: postgresql:14.3

# variables:
#   POSTGRES_DB: sample-test
#   POSTGRES_HOST_AUTH_METHOD: trust
#   DATABASE_URL: "postgresql://postgres@postgres:5432/sample-test"

# services:
#   - postgres:11
# docker run --rm --name etcd -p 2379:2379 -p 4001:4001 -d quay.io/coreos/etcd:v2.3.8 -name etcd0 -advertise-client-urls http://164.92.127.139:2379 -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001

# GIT PULL
# git pull

# YARN INSTALL
# yarn install

# START SIDE CONTAINER
# docker compose run redis

# CONFIG SIDE CONTAINER
# config side container

# START TARGET CONTAINER
# docker compose run target

# START TEST CONTAINER
# docker compose run test

# run this if building docker containers fails for shell exec
# usermod -aG docker gitlab-runner

stages:
  - order1
  - order2
  - b
  - a
  - srv
  - test4
# gitlab-runner exec docker a1
a1:
  stage: a
  image: node:latest # runs commands in this docker container
  # entrypoint: ["/bin/sh", "-c"]
  script:
    - ls /Users
    - echo testing > /Users/max/test.ing123 # works in container and doesn't persist on disk
    # - node -v
    - echo testing > /tmp/test.ing123
    - ls -la /tmp/test.ing123
    - node -v

# run with a service
# gitlab-runner exec docker a2
a2:
  stage: a
  image: alpine:latest # runs commands in this docker container
  variables:
    CI_DEBUG_SERVICES: "true" # show service logs
    FF_NETWORK_PER_BUILD: "true"  # need this for script to talk to services
  services:
    - redis
    # - name: redis
    #   alias: db
      # entrypoint: ["docker-entrypoint.sh"]
      # command: ["postgres"]
  script:
    - nslookup redis
    - ping -c 5 redis

# build a container with a service
# gitlab-runner exec shell a3
a3:
  stage: a
  script:
    - env
    - pwd
    - docker build --no-cache .

# TODO: build an image via docker in docker (dind)
a4:
  stage: a
  image: docker:20.10.16
  variables:
    CI_DEBUG_SERVICES: "true" # show service logs
    FF_NETWORK_PER_BUILD: "true"  # need this for script to talk to services
  services:
    - docker:20.10.16-dind
  # before_script:
  script:
    - ping -c 10 docker
    - nslookup docker
    # - docker build -t my-docker-image .
    # - docker run my-docker-image /script/to/run/tests

# have a built test container
b1:
  stage: order2
  # image: node:19-alpine3.16
  cache:
    untracked: true 
    # key: "$CI_PIPELINE_ID"
    key: "$CI_BUILD_REF_NAME"
    paths:
      - ./variables.env
  dependencies:
    - b2
  script:
    # restore variables
    # - export BAR="/Users/max/IdeaProjects/monorepos/zion/projects"
    - pwd
    # - ls "$(BAR)"
    # - ls "$PWD"
    - ls -la ./
    # - env
    - cat ./variables.env
    - source ./variables.env
    - echo "$PWD"
    - echo $BUILD_ID

b2:
  stage: order1
  # image: node:19-alpine3.16
  cache:
    untracked: true 
    key: "$CI_BUILD_REF_NAME"
    paths:
      - ./variables.env
  variables:
    CI_DEBUG_SERVICES: "true" # show service logs
    FF_NETWORK_PER_BUILD: "true"  # need this for script to talk to services
  script:
    - ls
    - export BUILD_ID=`docker build --quiet -t myapp .`
    # - ls "$BAR/blockhub"
    - docker info
    - echo $BUILD_ID
    - echo $CI_BUILD_REF_NAME
    - export -p BUILD_ID > ./variables.env
    # - cat ./variables.env
    - ls -la ./
    # - ls "$PWD"


# pass a variable from one job to another
c1:
  stage: order2
  # image: node:19-alpine3.16
  # artifacts:
  cache:
    untracked: true 
    unprotect: true
    # key: "$CI_PIPELINE_ID"
    key: "$CI_BUILD_REF_NAME"
    when: 'always'
    policy: pull
    paths:
      - ./variables.env
  dependencies:
    - c2
  script:
    - cat ./variables.env


# pass a variable from one job to another
c2:
  stage: order1
  # image: node:19-alpine3.16
  # artifacts:
  cache:
    untracked: true 
    unprotect: true
    # key: "$CI_PIPELINE_ID"
    key: "$CI_BUILD_REF_NAME"
    when: 'always'
    policy: push
    paths:
      - ./variables.env
  script:
    - echo "testing456" > ./variables.env


# b1a:
#   stage: b
#   script:
#     - ping -c 5 www.google.com

# services
# job_04:
#   stage: srv
#   services:
#     - name: postgres
#       alias: db-postgres
#   script:
#     - docker ps -a


# job_01a:
#   stage: build
#   script:
#     - ls /tmp
  # tags:
  #   - ruby

# job_02:
#   stage: test2
#   script:
#     - exit 1



# job_02:
#   stage: test
#   script:
#     - docker compose run appender

# job_03:
#   stage: build
#   script:
#     - echo "Hello, $GITLAB_USER_LOGIN!"

# job_04:
#   stage: test
#   script:
#     - echo "This job tests something"

# job_05:
#   stage: deploy
#   script:
#     - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
#   environment: production